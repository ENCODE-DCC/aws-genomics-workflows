---
AWSTemplateFormatVersion: "2010-09-09"
Description: >-
  (WWPS-GLS-WF-SFN-EXAMPLE) Creates the complete set of resources needed to run
  genomics workflows using AWS Step-Functions on AWS Batch

Mappings:
  TagMap:
    default:
      architecture: "genomics-workflows"
      solution: "step-functions"
      tags:
        - Key: "architecture"
          Value: "genomics-workflows"
        - Key: "solution"
          Value: "step-functions"

Parameters:
  S3BucketName:
    Description: S3 bucket you are using for workflow inputs and outputs
    Type: String
  
  BatchJobQueue:
    Description: Name or ARN of the AWS Batch Job Queue the workflow will use by default
    Type: String


Resources:
  IAMCodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: codebuild.amazonaws.com
          Action: sts:AssumeRole
      
      Policies:
        - PolicyName: !Sub codebuild-ecr-access-${AWS::Region}
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              Effect: Allow
              Resource: "*"
              Action:
                - "ecr:CreateRepository"
                - "ecr:BatchCheckLayerAvailability"
                - "ecr:CompleteLayerUpload"
                - "ecr:GetAuthorizationToken"
                - "ecr:InitiateLayerUpload"
                - "ecr:PutImage"
                - "ecr:UploadLayerPart"
        - PolicyName: !Sub codebuild-logs-access-${AWS::Region}
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              Effect: Allow
              Resource: "*"
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents

  IAMLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: "sts:AssumeRole"
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaRole
      Policies:
        - PolicyName: !Sub codebuild-access-${AWS::Region}
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "codebuild:StartBuild"
                  - "codebuild:BatchGetBuilds"
                Resource: "*"

  IAMStepFunctionsExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: states.amazonaws.com
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: !Sub states-access-policy-${AWS::Region}
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "batch:SubmitJob"
                  - "batch:DescribeJobs"
                  - "batch:TerminateJob"
                Resource: "*"
              - Effect: Allow
                Action:
                  - "events:PutTargets"
                  - "events:PutRule"
                  - "events:DescribeRule"
                Resource:
                  - !Sub "arn:aws:events:${AWS::Region}:${AWS::AccountId}:rule/StepFunctionsGetEventsForBatchJobsRule"

  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub
        - sfn-genomics-workflow-tools-${GUID}
        - GUID: !Select [ 2, !Split [ "/", !Ref "AWS::StackId" ]]
      Description: >-
        Builds containers for example step-functions genomics workflow
      Artifacts:
        Type: NO_ARTIFACTS
      Environment:
        Type: LINUX_CONTAINER
        Image: aws/codebuild/standard:1.0
        ComputeType: BUILD_GENERAL1_LARGE
        PrivilegedMode: True

      ServiceRole: !GetAtt IAMCodeBuildRole.Arn
      Source:
        Type: NO_SOURCE
        BuildSpec: !Sub
          - |-
            version: 0.2
            phases:
              pre_build:
                commands:
                  - echo "Docker Login to ECR"
                  - $(aws ecr get-login --no-include-email --region ${AWS::Region})
                  - echo "Creating ECR image repositories"
                  - aws ecr create-repository --repository-name bwa || true
                  - aws ecr create-repository --repository-name samtools || true
                  - aws ecr create-repository --repository-name bcftools || true
                  - echo "Getting source code from Github"
                  - git clone https://github.com/aws-samples/aws-genomics-workflows.git
                  - cd aws-genomics-workflows
              build:
                commands:
                  - echo "Building containers"
                  - ROOT="$(pwd)/src/containers"
                  # run container builds in parallel to avoid hitting Lambda time limit
                  # output is captured in logs and `cat`d below to ease debugging
                  - (cd $ROOT/bwa && ./build.sh > ./build.log) & (cd $ROOT/samtools && ./build.sh > ./build.log) & (cd $ROOT/bcftools && ./build.sh > ./build.log) & wait
                  - cat $ROOT/bwa/build.log
                  - cat $ROOT/samtools/build.log
                  - cat $ROOT/bcftools/build.log
              post_build:
                commands:
                  - echo "Tagging container images"
                  - docker tag bwa:aws ${REGISTRY}/bwa:aws
                  - docker tag samtools:aws ${REGISTRY}/samtools:aws
                  - docker tag bcftools:aws ${REGISTRY}/bcftools:aws
                  - echo "Pushing container images to ECR"
                  # push containers in parallel to avoid hitting Lambda time limit
                  - docker push ${REGISTRY}/bwa:aws & docker push ${REGISTRY}/samtools:aws & docker push ${REGISTRY}/bcftools:aws & wait
          - REGISTRY: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com

      Tags: !FindInMap ["TagMap", "default", "tags"]
  
  CodeBuildInvocation:
    Type: Custom::CodeBuildInvocation
    Properties:
      ServiceToken: !GetAtt CodeBuildInvocationFunction.Arn
      BuildProject: !Ref CodeBuildProject
  
  CodeBuildInvocationFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt IAMLambdaExecutionRole.Arn
      Runtime: python3.7
      Timeout: 900
      Code:
        ZipFile: |
          from time import sleep

          import boto3
          import cfnresponse

          def handler(event, context):
              if event['RequestType'] in ("Create", "Update"):
                  codebuild = boto3.client('codebuild')
                  build = codebuild.start_build(
                      projectName=event["ResourceProperties"]["BuildProject"]
                  )['build']
                          
                  id = build['id']
                  status = build['buildStatus']
                  while status == 'IN_PROGRESS':
                      sleep(10)
                      build = codebuild.batch_get_builds(ids=[id])['builds'][0]
                      status = build['buildStatus']
                  
                  if status != "SUCCEEDED":
                      cfnresponse.send(event, context, cfnresponse.FAILED, None)
              
              cfnresponse.send(event, context, cfnresponse.SUCCESS, None)


  BatchJobDefBwa:
    Type: AWS::Batch::JobDefinition
    Properties:
      JobDefinitionName: bwa
      Type: container
      ContainerProperties:
        Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/bwa:aws
        Vcpus: 8
        Memory: 64000
        Volumes:
          - Host:
              SourcePath: /opt/miniconda
            Name: awscli
        MountPoints:
          - ContainerPath: /opt/miniconda
            SourceVolume: awscli
      
  BatchJobDefSamtools:
    Type: AWS::Batch::JobDefinition
    Properties:
      JobDefinitionName: samtools
      Type: container
      ContainerProperties:
        Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/samtools:aws
        Vcpus: 8
        Memory: 32000
        Volumes:
          - Host:
              SourcePath: /opt/miniconda
            Name: awscli
        MountPoints:
          - ContainerPath: /opt/miniconda
            SourceVolume: awscli

  BatchJobDefBcftools:
    Type: AWS::Batch::JobDefinition
    Properties:
      JobDefinitionName: bcftools
      Type: container
      ContainerProperties:
        Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/bcftools:aws
        Vcpus: 8
        Memory: 32000
        Volumes:
          - Host:
              SourcePath: /opt/miniconda
            Name: awscli
        MountPoints:
          - ContainerPath: /opt/miniconda
            SourceVolume: awscli

  SfnStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName: !Sub
        - example-genomics-workflow-${GUID}
        - GUID: !Select [ 2, !Split [ "/", !Ref "AWS::StackId" ]]
      RoleArn: !GetAtt IAMStepFunctionsExecutionRole.Arn
      Tags: !FindInMap ["TagMap", "default", "tags"]
      DefinitionString: !Sub |-
        {
            "Comment": "Simple Genomics Workflow",
            "StartAt": "Initialize",
            "States": {
                "Initialize": {
                    "Type": "Pass",
                    "InputPath": "$",
                    "Parameters": {
                        "workflow": {
                            "name.$": "$$.StateMachine.Name",
                            "execution.$": "$$.Execution.Name" 
                        },
                        "params.$": "$.params",
                        "jobdefs": {
                            "bwa": "${BatchJobDefBwa}",
                            "samtools": "${BatchJobDefSamtools}",
                            "bcftools": "${BatchJobDefBcftools}"
                        }
                    },
                    "Next": "BwaMem"
                },
                "BwaMem": {
                    "Type": "Task",
                    "InputPath": "$",
                    "ResultPath": "$.results.bwa.mem",
                    "Resource": "arn:aws:states:::batch:submitJob.sync",
                    "Parameters": {
                        "JobName": "bwa-mem",
                        "JobDefinition.$": "$.jobdefs.bwa",
                        "JobQueue.$": "$.params.queue",
                        "ContainerOverrides": {
                            "Vcpus": 8,
                            "Memory": 32000,
                            "Environment": [
                                {"Name": "JOB_WORKFLOW_NAME", "Value.$": "$.workflow.name"},
                                {"Name": "JOB_WORKFLOW_EXECUTION", "Value.$": "$.workflow.execution"},
                                {"Name": "JOB_INPUTS", "Value": "s3://broad-references/hg38/v0/Homo_sapiens_assembly38.fasta* ${!SOURCE_DATA_PREFIX}/${!SAMPLE_ID}*"},
                                {"Name": "JOB_OUTPUTS", "Value": "*.sam"},
                                {"Name": "JOB_OUTPUT_PREFIX", "Value.$": "$.params.environment.JOB_OUTPUT_PREFIX"},
                                {"Name": "JOB_AWS_CLI_PATH", "Value.$": "$.params.environment.JOB_AWS_CLI_PATH"},
                                {"Name": "SOURCE_DATA_PREFIX", "Value.$": "$.params.environment.SOURCE_DATA_PREFIX"},
                                {"Name": "SAMPLE_ID", "Value.$": "$.params.environment.SAMPLE_ID"},
                                {"Name": "REFERENCE_NAME", "Value.$": "$.params.environment.REFERENCE_NAME"}
                            ],
                            "Command": [
                                "bwa mem -t 16 -p -o ${!SAMPLE_ID}.sam ${!REFERENCE_NAME}.fasta ${!SAMPLE_ID}_*1*.fastq.gz"
                            ]
                        }
                    },
                    "Next": "SamtoolsSort"
                },
                "SamtoolsSort": {
                    "Type": "Task",
                    "InputPath": "$",
                    "ResultPath": "$.results.samtools.sort",
                    "Resource": "arn:aws:states:::batch:submitJob.sync",
                    "Parameters": {
                        "JobName": "samtools-sort",
                        "JobDefinition.$": "$.jobdefs.samtools",
                        "JobQueue.$": "$.params.queue",
                        "ContainerOverrides": {
                            "Vcpus": 8,
                            "Memory": 32000,
                            "Environment": [
                                {"Name": "JOB_WORKFLOW_NAME", "Value.$": "$.workflow.name"},
                                {"Name": "JOB_WORKFLOW_EXECUTION", "Value.$": "$.workflow.execution"},
                                {"Name": "JOB_INPUTS", "Value": "$JOB_OUTPUT_PREFIX/*.sam"},
                                {"Name": "JOB_OUTPUTS", "Value": "*.bam"},
                                {"Name": "JOB_OUTPUT_PREFIX", "Value.$": "$.params.environment.JOB_OUTPUT_PREFIX"},
                                {"Name": "JOB_AWS_CLI_PATH", "Value.$": "$.params.environment.JOB_AWS_CLI_PATH"},
                                {"Name": "SAMPLE_ID", "Value.$": "$.params.environment.SAMPLE_ID"}
                            ],
                            "Command": [
                                "samtools sort -@ 16 -o ${!SAMPLE_ID}.bam ${!SAMPLE_ID}.sam"
                            ]
                        }
                    },
                    "Next": "SamtoolsIndex"
                },
                "SamtoolsIndex": {
                    "Type": "Task",
                    "InputPath": "$",
                    "ResultPath": "$.results.samtools.index",
                    "Resource": "arn:aws:states:::batch:submitJob.sync",
                    "Parameters": {
                        "JobName": "samtools-index",
                        "JobDefinition.$": "$.jobdefs.samtools",
                        "JobQueue.$": "$.params.queue",
                        "ContainerOverrides": {
                            "Vcpus": 8,
                            "Memory": 32000,
                            "Environment": [
                                {"Name": "JOB_WORKFLOW_NAME", "Value.$": "$.workflow.name"},
                                {"Name": "JOB_WORKFLOW_EXECUTION", "Value.$": "$.workflow.execution"},
                                {"Name": "JOB_INPUTS", "Value": "$JOB_OUTPUT_PREFIX/*.bam"},
                                {"Name": "JOB_OUTPUTS", "Value": "*.bam*"},
                                {"Name": "JOB_OUTPUT_PREFIX", "Value.$": "$.params.environment.JOB_OUTPUT_PREFIX"},
                                {"Name": "JOB_AWS_CLI_PATH", "Value.$": "$.params.environment.JOB_AWS_CLI_PATH"},
                                {"Name": "SAMPLE_ID", "Value.$": "$.params.environment.SAMPLE_ID"}
                            ],
                            "Command": [
                                "samtools index ${!SAMPLE_ID}.bam"
                            ]
                        }
                    },
                    "Next": "BcftoolsMPileup"
                },
                "BcftoolsMPileup": {
                    "Type": "Task",
                    "InputPath": "$",
                    "ResultPath": "$.result.bcftools.mpileup",
                    "Resource": "arn:aws:states:::batch:submitJob.sync",
                    "Parameters": {
                        "JobName": "bcftools-mpileup",
                        "JobDefinition.$": "$.jobdefs.bcftools",
                        "JobQueue.$": "$.params.queue",
                        "ContainerOverrides": {
                            "Vcpus": 8,
                            "Memory": 32000,
                            "Environment": [
                                {"Name": "JOB_WORKFLOW_NAME", "Value.$": "$.workflow.name"},
                                {"Name": "JOB_WORKFLOW_EXECUTION", "Value.$": "$.workflow.execution"},
                                {"Name": "JOB_INPUTS", "Value": "s3://broad-references/hg38/v0/Homo_sapiens_assembly38.fasta* $JOB_OUTPUT_PREFIX/*.bam*"},
                                {"Name": "JOB_OUTPUTS", "Value": "*.mpileup.gz"},
                                {"Name": "JOB_OUTPUT_PREFIX", "Value.$": "$.params.environment.JOB_OUTPUT_PREFIX"},
                                {"Name": "JOB_AWS_CLI_PATH", "Value.$": "$.params.environment.JOB_AWS_CLI_PATH"},
                                {"Name": "SAMPLE_ID", "Value.$": "$.params.environment.SAMPLE_ID"},
                                {"Name": "REFERENCE_NAME", "Value.$": "$.params.environment.REFERENCE_NAME"},
                                {"Name": "CHROMOSOME", "Value.$": "$.params.chromosome"}
                            ],
                            "Command": [
                                "bcftools mpileup --threads 16 -r ${!CHROMOSOME} -Oz -f ${!REFERENCE_NAME}.fasta -o ${!SAMPLE_ID}.${!CHROMOSOME}.mpileup.gz ${!SAMPLE_ID}.bam"
                            ]
                        }
                    },
                    "Next": "BcftoolsCall"
                },
                "BcftoolsCall": {
                    "Type": "Task",
                    "InputPath": "$",
                    "ResultPath": "$.result.bcftools.call",
                    "Resource": "arn:aws:states:::batch:submitJob.sync",
                    "Parameters": {
                        "JobName": "bcftools-call",
                        "JobDefinition.$": "$.jobdefs.bcftools",
                        "JobQueue.$": "$.params.queue",
                        "ContainerOverrides": {
                            "Vcpus": 8,
                            "Memory": 32000,
                            "Environment": [
                                {"Name": "JOB_WORKFLOW_NAME", "Value.$": "$.workflow.name"},
                                {"Name": "JOB_WORKFLOW_EXECUTION", "Value.$": "$.workflow.execution"},
                                {"Name": "JOB_INPUTS", "Value": "$JOB_OUTPUT_PREFIX/*.${!CHROMOSOME}.mpileup.gz"},
                                {"Name": "JOB_OUTPUTS", "Value": "*.vcf.gz"},
                                {"Name": "JOB_OUTPUT_PREFIX", "Value.$": "$.params.environment.JOB_OUTPUT_PREFIX"},
                                {"Name": "JOB_AWS_CLI_PATH", "Value.$": "$.params.environment.JOB_AWS_CLI_PATH"},
                                {"Name": "SAMPLE_ID", "Value.$": "$.params.environment.SAMPLE_ID"},
                                {"Name": "CHROMOSOME", "Value.$": "$.params.chromosome"}
                            ],
                            "Command": [
                                "bcftools call -m --threads 16 -t ${!CHROMOSOME} -Oz -o ${!SAMPLE_ID}.${!CHROMOSOME}.vcf.gz ${!SAMPLE_ID}.${!CHROMOSOME}.mpileup.gz"
                            ]
                        }
                    },
                    "End": true
                }
            }
        }

Outputs:
  BwaContainerImage:
    Value: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/bwa:aws
  
  SamtoolsContainerImage:
    Value: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/samtools:aws
  
  BcftoolsContainerImage:
    Value: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/bcftools:aws

  BwaJobDefinition:
    Value: !Ref BatchJobDefBwa
    Export:
      Name: BatchJobDefinition-bwa
  
  SamtoolsJobDefinition:
    Value: !Ref BatchJobDefSamtools
    Export:
      Name: BatchJobDefinition-samtools
  
  BcftoolsJobDefinition:
    Value: !Ref BatchJobDefBcftools
    Export:
      Name: BatchJobDefinition-bcftools
  
  StateMachine:
    Value: !Ref SfnStateMachine
    Description: Step-functions state-machine that demonstrates a simple genomics workflow
  
  StateMachineInput:
    Description: Example input for the state machine
    Value:
      Fn::Sub: |-
        {
            "params": {
                "queue": "${BatchJobQueue}",
                "environment": {
                    "REFERENCE_NAME": "Homo_sapiens_assembly38",
                    "SAMPLE_ID": "NIST7035",
                    "SOURCE_DATA_PREFIX": "s3://aws-batch-genomics-shared/secondary-analysis/example-files/fastq",
                    "JOB_OUTPUT_PREFIX": "s3://${S3BucketName}",
                    "JOB_AWS_CLI_PATH": "/home/ec2-user/miniconda/bin"
                },
                "chromosome": "chr21"
            }
        }
...